{"ast":null,"code":"var _jsxFileName = \"/usr/local/ampps/www/react-quiz/src/components/pages/Quiz.js\",\n    _s = $RefreshSig$();\n\nimport { getDatabase, ref, set } from 'firebase/database';\nimport _ from 'lodash';\nimport { useEffect, useReducer, useState } from 'react';\nimport { Navigate, useParams } from 'react-router-dom';\nimport { useAuth } from '../../contexts/AuthContext';\nimport useQuestions from '../../hooks/useQuestions';\nimport Answers from '../Answers';\nimport Progressbar from '../Progressbar';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst initialState = null;\n\nconst reducer = (state, action) => {\n  switch (action.type) {\n    case 'questions':\n      action.value.forEach(question => {\n        question.options.forEach(option => {\n          option.checked = false;\n        });\n      });\n      return action.value;\n\n    case 'answer':\n      const questions = _.cloneDeep(state);\n\n      questions[action.questionID].options[action.optionIndex].checked = action.value;\n      return questions;\n\n    default:\n      return state;\n  }\n};\n\nexport default function Quiz() {\n  _s();\n\n  const {\n    currentUser\n  } = useAuth();\n  const {\n    id\n  } = useParams();\n  const {\n    loader,\n    error,\n    questions\n  } = useQuestions(id);\n  const [currentQuestion, setCurrentQuestion] = useState(0);\n  const [qna, dispatch] = useReducer(reducer, initialState);\n  useEffect(() => {\n    dispatch({\n      type: 'questions',\n      value: questions\n    });\n  }, [questions]);\n\n  function handleAnswerChange(e, index) {\n    dispatch({\n      type: 'answer',\n      questionID: currentQuestion,\n      optionIndex: index,\n      value: e.target.checked\n    });\n  } // handle when the user clicks next to get the next question\n\n\n  function nextQuestion() {\n    if (currentQuestion + 1 < questions.length) {\n      setCurrentQuestion(prevCurrentQuestion => prevCurrentQuestion + 1);\n    }\n  } // handle when the user clicks prev to get the prev question\n\n\n  function prevQuestion() {\n    if (currentQuestion >= 1 && currentQuestion <= questions.length) {\n      setCurrentQuestion(prevCurrentQuestion => prevCurrentQuestion - 1);\n    }\n  } // submit quiz\n\n\n  async function submit() {\n    const {\n      uid\n    } = currentUser;\n    const db = getDatabase();\n    const resultRef = ref(db, `result/${uid}`);\n    await set(resultRef, {\n      [id]: qna\n    });\n\n    /*#__PURE__*/\n    _jsxDEV(Navigate, {\n      to: {\n        pathname: `/result/${id}`,\n        state: {\n          qna\n        }\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 5\n    }, this);\n  } // calculate percentage of progress\n\n\n  const percentage = questions.length > 0 ? (currentQuestion + 1) / questions.length * 100 : 0;\n  return !currentUser ? /*#__PURE__*/_jsxDEV(Navigate, {\n    to: \"/login\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 93,\n    columnNumber: 5\n  }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [loader && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 18\n    }, this), error && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"There was an error !\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 17\n    }, this), !loader && !error && qna && qna.length > 0 && /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: qna[currentQuestion].title\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n        children: \"Question can have multiple answers\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Answers, {\n        input: true,\n        options: qna[currentQuestion].options,\n        handleChange: handleAnswerChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Progressbar, {\n        next: nextQuestion,\n        prev: prevQuestion,\n        submit: submit,\n        percentage: percentage\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true)]\n  }, void 0, true);\n}\n\n_s(Quiz, \"lSO1bUdi3YPnLpo9GiLK5gWg2Mg=\", false, function () {\n  return [useAuth, useParams, useQuestions];\n});\n\n_c = Quiz;\n\nvar _c;\n\n$RefreshReg$(_c, \"Quiz\");","map":{"version":3,"names":["getDatabase","ref","set","_","useEffect","useReducer","useState","Navigate","useParams","useAuth","useQuestions","Answers","Progressbar","initialState","reducer","state","action","type","value","forEach","question","options","option","checked","questions","cloneDeep","questionID","optionIndex","Quiz","currentUser","id","loader","error","currentQuestion","setCurrentQuestion","qna","dispatch","handleAnswerChange","e","index","target","nextQuestion","length","prevCurrentQuestion","prevQuestion","submit","uid","db","resultRef","pathname","percentage","title"],"sources":["/usr/local/ampps/www/react-quiz/src/components/pages/Quiz.js"],"sourcesContent":["import { getDatabase, ref, set } from 'firebase/database';\nimport _ from 'lodash';\nimport { useEffect, useReducer, useState } from 'react';\nimport { Navigate, useParams } from 'react-router-dom';\nimport { useAuth } from '../../contexts/AuthContext';\nimport useQuestions from '../../hooks/useQuestions';\nimport Answers from '../Answers';\nimport Progressbar from '../Progressbar';\n\nconst initialState = null;\n\nconst reducer = (state, action) => {\n  switch(action.type){\n    case 'questions':\n      action.value.forEach(question => {\n        question.options.forEach(option => {\n          option.checked = false;\n        });\n      });\n\n      return action.value;\n    case 'answer':\n      const questions = _.cloneDeep(state);\n\n      questions[action.questionID].options[action.optionIndex].checked = action.value;\n\n      return questions;\n    default:\n      return state;\n  }\n}\n\nexport default function Quiz(){\n  const {currentUser} = useAuth();\n  const {id} = useParams();\n  const {loader, error, questions} = useQuestions(id);\n  const [currentQuestion, setCurrentQuestion] = useState(0);\n\n  const [qna, dispatch] = useReducer(reducer, initialState);\n\n  useEffect(() => {\n    dispatch({\n      type: 'questions',\n      value: questions,\n    });\n  }, [questions]);\n\n  function handleAnswerChange(e, index){\n    dispatch({\n      type: 'answer',\n      questionID: currentQuestion,\n      optionIndex: index,\n      value: e.target.checked,\n    });\n  }\n\n  // handle when the user clicks next to get the next question\n  function nextQuestion(){\n    if(currentQuestion + 1 < questions.length){\n      setCurrentQuestion(prevCurrentQuestion => prevCurrentQuestion + 1);\n    }\n  }\n\n  // handle when the user clicks prev to get the prev question\n  function prevQuestion(){\n    if(currentQuestion >= 1 && currentQuestion <= questions.length){\n      setCurrentQuestion(prevCurrentQuestion => prevCurrentQuestion - 1);\n    }\n  }\n\n  // submit quiz\n  async function submit(){\n    const {uid} = currentUser;\n    const db = getDatabase();\n    const resultRef = ref(db, `result/${uid}`);\n\n    await set(resultRef, {\n      [id]: qna,\n    });\n\n    <Navigate to={{\n      pathname: `/result/${id}`,\n      state: {\n        qna\n      }\n    }} />\n  }\n\n  // calculate percentage of progress\n  const percentage = questions.length > 0 ? ((currentQuestion + 1) / questions.length) * 100 : 0;\n\n  return !currentUser ? (\n    <Navigate to='/login' />\n  ) : (\n    <>\n      {loader && <div>Loading...</div>}\n      {error && <div>There was an error !</div>}\n\n      {!loader && !error && qna && qna.length > 0 && (\n        <>\n          <h1>{qna[currentQuestion].title}</h1>\n          <h4>Question can have multiple answers</h4>\n\n          <Answers input options={qna[currentQuestion].options} handleChange={handleAnswerChange} />\n          <Progressbar next={nextQuestion} prev={prevQuestion} submit={submit} percentage={percentage} />\n        </>\n      )}\n    </>\n  );\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}