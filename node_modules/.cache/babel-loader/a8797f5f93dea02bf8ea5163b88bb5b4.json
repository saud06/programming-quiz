{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { get, getDatabase, orderByKey, query, ref } from 'firebase/database';\nimport { useEffect, useState } from \"react\";\nexport default function useQuestions(videoID) {\n  _s();\n\n  const [loader, setLoader] = useState(true);\n  const [error, setError] = useState(false);\n  const [questions, setQuestions] = useState([]);\n  useEffect(() => {\n    async function fetchQuestions() {\n      const db = getDatabase();\n      const quizRef = ref(db, 'quiz/' + videoID + 'questions');\n      const quizQuery = query(quizRef, orderByKey());\n\n      try {\n        setError(false);\n        setLoader(true); // request firebase database\n\n        const snapshot = await get(quizQuery);\n        setLoader(false); // check if snapshot has data. return true / false\n\n        if (snapshot.exists()) {\n          // get previous state data first\n          setQuestions(prevQuestions => {\n            // return an array of previous destructured value, plus values from snapshot object\n            return [...prevQuestions, Object.values(snapshot.val())];\n          });\n        }\n      } catch (err) {\n        console.log(err);\n        setLoader(false);\n        setError(true);\n      }\n    }\n\n    fetchQuestions();\n  }, [videoID]);\n  return {\n    loader,\n    error,\n    questions\n  };\n}\n\n_s(useQuestions, \"Bf43AfAUYYUpvqEvke+TD3gUGeI=\");","map":{"version":3,"names":["get","getDatabase","orderByKey","query","ref","useEffect","useState","useQuestions","videoID","loader","setLoader","error","setError","questions","setQuestions","fetchQuestions","db","quizRef","quizQuery","snapshot","exists","prevQuestions","Object","values","val","err","console","log"],"sources":["/usr/local/ampps/www/react-quiz/src/hooks/useQuestions.js"],"sourcesContent":["import { get, getDatabase, orderByKey, query, ref } from 'firebase/database';\nimport { useEffect, useState } from \"react\";\n\nexport default function useQuestions(videoID){\n  const [loader, setLoader] = useState(true);\n  const [error, setError] = useState(false);\n  const [questions, setQuestions] = useState([]);\n\n  useEffect(() => {\n    async function fetchQuestions(){\n      const db = getDatabase();\n      const quizRef = ref(db, 'quiz/' + videoID + 'questions');\n      const quizQuery = query(quizRef, orderByKey());\n\n      try {\n        setError(false);\n        setLoader(true);\n\n        // request firebase database\n        const snapshot = await get(quizQuery);\n\n        setLoader(false);\n\n        // check if snapshot has data. return true / false\n        if(snapshot.exists()){\n          // get previous state data first\n          setQuestions((prevQuestions) => {\n            // return an array of previous destructured value, plus values from snapshot object\n            return [...prevQuestions, Object.values(snapshot.val())];\n          });\n        }\n      } catch (err) {\n        console.log(err);\n\n        setLoader(false);\n        setError(true);\n      }\n    }\n\n    fetchQuestions();\n  }, [videoID]);\n\n  return {\n    loader,\n    error,\n    questions,\n  }\n}"],"mappings":";;AAAA,SAASA,GAAT,EAAcC,WAAd,EAA2BC,UAA3B,EAAuCC,KAAvC,EAA8CC,GAA9C,QAAyD,mBAAzD;AACA,SAASC,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AAEA,eAAe,SAASC,YAAT,CAAsBC,OAAtB,EAA8B;EAAA;;EAC3C,MAAM,CAACC,MAAD,EAASC,SAAT,IAAsBJ,QAAQ,CAAC,IAAD,CAApC;EACA,MAAM,CAACK,KAAD,EAAQC,QAAR,IAAoBN,QAAQ,CAAC,KAAD,CAAlC;EACA,MAAM,CAACO,SAAD,EAAYC,YAAZ,IAA4BR,QAAQ,CAAC,EAAD,CAA1C;EAEAD,SAAS,CAAC,MAAM;IACd,eAAeU,cAAf,GAA+B;MAC7B,MAAMC,EAAE,GAAGf,WAAW,EAAtB;MACA,MAAMgB,OAAO,GAAGb,GAAG,CAACY,EAAD,EAAK,UAAUR,OAAV,GAAoB,WAAzB,CAAnB;MACA,MAAMU,SAAS,GAAGf,KAAK,CAACc,OAAD,EAAUf,UAAU,EAApB,CAAvB;;MAEA,IAAI;QACFU,QAAQ,CAAC,KAAD,CAAR;QACAF,SAAS,CAAC,IAAD,CAAT,CAFE,CAIF;;QACA,MAAMS,QAAQ,GAAG,MAAMnB,GAAG,CAACkB,SAAD,CAA1B;QAEAR,SAAS,CAAC,KAAD,CAAT,CAPE,CASF;;QACA,IAAGS,QAAQ,CAACC,MAAT,EAAH,EAAqB;UACnB;UACAN,YAAY,CAAEO,aAAD,IAAmB;YAC9B;YACA,OAAO,CAAC,GAAGA,aAAJ,EAAmBC,MAAM,CAACC,MAAP,CAAcJ,QAAQ,CAACK,GAAT,EAAd,CAAnB,CAAP;UACD,CAHW,CAAZ;QAID;MACF,CAjBD,CAiBE,OAAOC,GAAP,EAAY;QACZC,OAAO,CAACC,GAAR,CAAYF,GAAZ;QAEAf,SAAS,CAAC,KAAD,CAAT;QACAE,QAAQ,CAAC,IAAD,CAAR;MACD;IACF;;IAEDG,cAAc;EACf,CAhCQ,EAgCN,CAACP,OAAD,CAhCM,CAAT;EAkCA,OAAO;IACLC,MADK;IAELE,KAFK;IAGLE;EAHK,CAAP;AAKD;;GA5CuBN,Y"},"metadata":{},"sourceType":"module"}