{"ast":null,"code":"var _jsxFileName = \"/usr/local/ampps/www/react-quiz/src/contexts/AuthContext.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport { createUserWithEmailAndPassword, getAuth, onAuthStateChanged, signInWithEmailAndPassword, signOut, updateProfile } from 'firebase/auth';\nimport React, { useContext, useEffect, useState } from \"react\";\nimport '../firebase';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/React.createContext(); // Custom hook useAuth() that will be called by all other components to get / consume context and get AuthContext data\n\nexport function useAuth() {\n  _s();\n\n  // All other components will get AuthContext data from the context\n  return useContext(AuthContext);\n} // AuthProvider function is not the AuthContext (or context provider) itself. Rather, It will wrap the whole application\n\n_s(useAuth, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\n\nexport function AuthProvider(_ref) {\n  _s2();\n\n  let {\n    children\n  } = _ref;\n  // Set loader because the server requires some time to fetch the data from Firebase\n  const [loader, setLoader] = useState(true); // Set current logged in user data \n\n  const [currentUser, setCurrentUser] = useState(); // Update currentUser data and loader after getitng the data from server\n\n  useEffect(() => {\n    const auth = getAuth();\n    const unsubscribe = onAuthStateChanged(auth, user => {\n      setCurrentUser(user);\n      setLoader(false);\n    }); // clean up to avoin memory leak\n\n    return unsubscribe;\n  }, []); // Signup function\n  // This is an asynchronous function because of server response\n\n  async function signup(email, password, username) {\n    const auth = getAuth();\n    await createUserWithEmailAndPassword(auth, email, password); // Update profile with username\n\n    await updateProfile(auth.currentUser, {\n      displayName: username\n    }); // Get the updated user data\n\n    const user = auth.currentUser; // Update user data to local state to get that into all over the app\n\n    setCurrentUser({ ...user\n    });\n  } // Login function\n\n\n  function login(email, password) {\n    const auth = getAuth();\n    return signInWithEmailAndPassword(auth, email, password);\n  } // Logout function\n\n\n  function logout() {\n    const auth = getAuth();\n    return signOut(auth);\n  } // Create value obj to set into the Provider\n\n\n  const value = {\n    currentUser,\n    signup,\n    login,\n    logout\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: value,\n    children: !loader && children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 77,\n    columnNumber: 5\n  }, this);\n}\n\n_s2(AuthProvider, \"w7DoDnaEeRMNcWG3bZ81YFWVgOA=\");\n\n_c = AuthProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["createUserWithEmailAndPassword","getAuth","onAuthStateChanged","signInWithEmailAndPassword","signOut","updateProfile","React","useContext","useEffect","useState","AuthContext","createContext","useAuth","AuthProvider","children","loader","setLoader","currentUser","setCurrentUser","auth","unsubscribe","user","signup","email","password","username","displayName","login","logout","value"],"sources":["/usr/local/ampps/www/react-quiz/src/contexts/AuthContext.js"],"sourcesContent":["import { createUserWithEmailAndPassword, getAuth, onAuthStateChanged, signInWithEmailAndPassword, signOut, updateProfile } from 'firebase/auth';\nimport React, { useContext, useEffect, useState } from \"react\";\nimport '../firebase';\n\nconst AuthContext = React.createContext();\n\n// Custom hook useAuth() that will be called by all other components to get / consume context and get AuthContext data\nexport function useAuth(){\n  // All other components will get AuthContext data from the context\n  return useContext(AuthContext);\n}\n\n// AuthProvider function is not the AuthContext (or context provider) itself. Rather, It will wrap the whole application\nexport function AuthProvider({children}){\n  // Set loader because the server requires some time to fetch the data from Firebase\n  const [loader, setLoader] = useState(true);\n  // Set current logged in user data \n  const [currentUser, setCurrentUser] = useState();\n\n  // Update currentUser data and loader after getitng the data from server\n  useEffect(() => {\n    const auth = getAuth();\n\n    const unsubscribe = onAuthStateChanged(auth, (user) => {\n      setCurrentUser(user);\n      setLoader(false);\n    });\n\n    // clean up to avoin memory leak\n    return unsubscribe;\n  }, []);\n\n  // Signup function\n  // This is an asynchronous function because of server response\n  async function signup(email, password, username){\n    const auth = getAuth();\n\n    await createUserWithEmailAndPassword(auth, email, password);\n\n    // Update profile with username\n    await updateProfile(auth.currentUser, {\n      displayName: username,\n    });\n\n    // Get the updated user data\n    const user = auth.currentUser;\n\n    // Update user data to local state to get that into all over the app\n    setCurrentUser({\n      ...user,\n    });\n  }\n\n  // Login function\n  function login(email, password){\n    const auth = getAuth();\n\n    return signInWithEmailAndPassword(auth, email, password);\n  }\n\n  // Logout function\n  function logout(){\n    const auth = getAuth();\n\n    return signOut(auth);\n  }\n\n  // Create value obj to set into the Provider\n  const value = {\n    currentUser,\n    signup,\n    login,\n    logout,\n  }\n\n  return(\n    <AuthContext.Provider value={value}>\n      {/* Show children data once loading is done */}\n      {!loader && children}\n    </AuthContext.Provider>\n  );\n}"],"mappings":";;;;AAAA,SAASA,8BAAT,EAAyCC,OAAzC,EAAkDC,kBAAlD,EAAsEC,0BAAtE,EAAkGC,OAAlG,EAA2GC,aAA3G,QAAgI,eAAhI;AACA,OAAOC,KAAP,IAAgBC,UAAhB,EAA4BC,SAA5B,EAAuCC,QAAvC,QAAuD,OAAvD;AACA,OAAO,aAAP;;AAEA,MAAMC,WAAW,gBAAGJ,KAAK,CAACK,aAAN,EAApB,C,CAEA;;AACA,OAAO,SAASC,OAAT,GAAkB;EAAA;;EACvB;EACA,OAAOL,UAAU,CAACG,WAAD,CAAjB;AACD,C,CAED;;GALgBE,O;;AAMhB,OAAO,SAASC,YAAT,OAAiC;EAAA;;EAAA,IAAX;IAACC;EAAD,CAAW;EACtC;EACA,MAAM,CAACC,MAAD,EAASC,SAAT,IAAsBP,QAAQ,CAAC,IAAD,CAApC,CAFsC,CAGtC;;EACA,MAAM,CAACQ,WAAD,EAAcC,cAAd,IAAgCT,QAAQ,EAA9C,CAJsC,CAMtC;;EACAD,SAAS,CAAC,MAAM;IACd,MAAMW,IAAI,GAAGlB,OAAO,EAApB;IAEA,MAAMmB,WAAW,GAAGlB,kBAAkB,CAACiB,IAAD,EAAQE,IAAD,IAAU;MACrDH,cAAc,CAACG,IAAD,CAAd;MACAL,SAAS,CAAC,KAAD,CAAT;IACD,CAHqC,CAAtC,CAHc,CAQd;;IACA,OAAOI,WAAP;EACD,CAVQ,EAUN,EAVM,CAAT,CAPsC,CAmBtC;EACA;;EACA,eAAeE,MAAf,CAAsBC,KAAtB,EAA6BC,QAA7B,EAAuCC,QAAvC,EAAgD;IAC9C,MAAMN,IAAI,GAAGlB,OAAO,EAApB;IAEA,MAAMD,8BAA8B,CAACmB,IAAD,EAAOI,KAAP,EAAcC,QAAd,CAApC,CAH8C,CAK9C;;IACA,MAAMnB,aAAa,CAACc,IAAI,CAACF,WAAN,EAAmB;MACpCS,WAAW,EAAED;IADuB,CAAnB,CAAnB,CAN8C,CAU9C;;IACA,MAAMJ,IAAI,GAAGF,IAAI,CAACF,WAAlB,CAX8C,CAa9C;;IACAC,cAAc,CAAC,EACb,GAAGG;IADU,CAAD,CAAd;EAGD,CAtCqC,CAwCtC;;;EACA,SAASM,KAAT,CAAeJ,KAAf,EAAsBC,QAAtB,EAA+B;IAC7B,MAAML,IAAI,GAAGlB,OAAO,EAApB;IAEA,OAAOE,0BAA0B,CAACgB,IAAD,EAAOI,KAAP,EAAcC,QAAd,CAAjC;EACD,CA7CqC,CA+CtC;;;EACA,SAASI,MAAT,GAAiB;IACf,MAAMT,IAAI,GAAGlB,OAAO,EAApB;IAEA,OAAOG,OAAO,CAACe,IAAD,CAAd;EACD,CApDqC,CAsDtC;;;EACA,MAAMU,KAAK,GAAG;IACZZ,WADY;IAEZK,MAFY;IAGZK,KAHY;IAIZC;EAJY,CAAd;EAOA,oBACE,QAAC,WAAD,CAAa,QAAb;IAAsB,KAAK,EAAEC,KAA7B;IAAA,UAEG,CAACd,MAAD,IAAWD;EAFd;IAAA;IAAA;IAAA;EAAA,QADF;AAMD;;IApEeD,Y;;KAAAA,Y"},"metadata":{},"sourceType":"module"}